// <auto-generated />
using System;
using CodeLifter.Covid19.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CodeLifter.Covid19.Data.Migrations
{
    [DbContext(typeof(CovidContext))]
    partial class CovidContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CodeLifter.Covid19.Data.Models.Country", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("GeoCoordinateId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SlugId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasAlternateKey("SlugId");

                    b.HasIndex("GeoCoordinateId");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("CodeLifter.Covid19.Data.Models.DataFile", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Completed")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CompletedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RecordsProcessed")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("DataFiles");
                });

            modelBuilder.Entity("CodeLifter.Covid19.Data.Models.DataPoint", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Active")
                        .HasColumnType("int");

                    b.Property<double?>("CaseFatalityRatio")
                        .HasColumnType("float");

                    b.Property<string>("CombinedKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Confirmed")
                        .HasColumnType("int");

                    b.Property<string>("CountrySlugId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Deaths")
                        .HasColumnType("int");

                    b.Property<string>("DistrictSlugId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double?>("IncidenceRate")
                        .HasColumnType("float");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ProvinceSlugId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("Recovered")
                        .HasColumnType("int");

                    b.Property<string>("SourceFile")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("SourceFile", "CountrySlugId", "ProvinceSlugId", "DistrictSlugId")
                        .IsUnique()
                        .HasFilter("[SourceFile] IS NOT NULL AND [CountrySlugId] IS NOT NULL");

                    b.ToTable("DataPoints");
                });

            modelBuilder.Entity("CodeLifter.Covid19.Data.Models.DataUpdate", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Completed")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CompletedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastCompletedFileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RecordsProcessed")
                        .HasColumnType("int");

                    b.Property<string>("StartFileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("DataUpdates");
                });

            modelBuilder.Entity("CodeLifter.Covid19.Data.Models.District", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CountrySlugId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("FIPS")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("GeoCoordinateId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProvinceSlugId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SlugId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasAlternateKey("SlugId");

                    b.HasIndex("GeoCoordinateId");

                    b.ToTable("Districts");
                });

            modelBuilder.Entity("CodeLifter.Covid19.Data.Models.GeoCoordinate", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<double?>("Latitude")
                        .HasColumnType("float");

                    b.Property<double?>("Longitude")
                        .HasColumnType("float");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("GeoCoordinates");
                });

            modelBuilder.Entity("CodeLifter.Covid19.Data.Models.Province", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CountrySlugId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("GeoCoordinateId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SlugId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasAlternateKey("SlugId");

                    b.HasIndex("GeoCoordinateId");

                    b.ToTable("Provinces");
                });

            modelBuilder.Entity("CodeLifter.Covid19.Data.Models.Total", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Active")
                        .HasColumnType("int");

                    b.Property<int?>("Confirmed")
                        .HasColumnType("int");

                    b.Property<int?>("Count")
                        .HasColumnType("int");

                    b.Property<string>("CountrySlugId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Deaths")
                        .HasColumnType("int");

                    b.Property<string>("DistrictSlugId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProvinceSlugId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("Recovered")
                        .HasColumnType("int");

                    b.Property<string>("SourceFile")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("SourceFile", "CountrySlugId", "ProvinceSlugId", "DistrictSlugId")
                        .IsUnique()
                        .HasFilter("[SourceFile] IS NOT NULL AND [CountrySlugId] IS NOT NULL AND [ProvinceSlugId] IS NOT NULL AND [DistrictSlugId] IS NOT NULL");

                    b.ToTable("Totals");
                });

            modelBuilder.Entity("CodeLifter.Covid19.Data.Models.Country", b =>
                {
                    b.HasOne("CodeLifter.Covid19.Data.Models.GeoCoordinate", "GeoCoordinate")
                        .WithMany()
                        .HasForeignKey("GeoCoordinateId");
                });

            modelBuilder.Entity("CodeLifter.Covid19.Data.Models.District", b =>
                {
                    b.HasOne("CodeLifter.Covid19.Data.Models.GeoCoordinate", "GeoCoordinate")
                        .WithMany()
                        .HasForeignKey("GeoCoordinateId");
                });

            modelBuilder.Entity("CodeLifter.Covid19.Data.Models.Province", b =>
                {
                    b.HasOne("CodeLifter.Covid19.Data.Models.GeoCoordinate", "GeoCoordinate")
                        .WithMany()
                        .HasForeignKey("GeoCoordinateId");
                });
#pragma warning restore 612, 618
        }
    }
}
